// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieStar.Infra.Data.Persistence;

#nullable disable

namespace MovieStar.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250611222617_LatestMigration")]
    partial class LatestMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmeGenero", b =>
                {
                    b.Property<Guid>("FilmeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeneroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FilmeId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("FilmeGeneros", (string)null);
                });

            modelBuilder.Entity("FilmePersonagem", b =>
                {
                    b.Property<Guid>("ElencoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilmeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ElencoId", "FilmeId");

                    b.HasIndex("FilmeId");

                    b.ToTable("FilmeElencos", (string)null);
                });

            modelBuilder.Entity("GeneroSerie", b =>
                {
                    b.Property<Guid>("GeneroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GeneroId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieGeneros", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.AvaliacaoFilme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FilmeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Nota")
                        .HasColumnType("float");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FilmeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AvaliacoesFilmes", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.AvaliacaoSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("datetime2");

                    b.Property<double>("Nota")
                        .HasColumnType("float");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AvaliacoesSeries", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Episodio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Duracao")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<Guid>("TemporadaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemporadaId");

                    b.ToTable("Episodios", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Filme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Classificacao")
                        .HasColumnType("float");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Duracao")
                        .HasColumnType("int");

                    b.Property<int>("FaixaEtaria")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Filmes", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Genero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Generos", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Personagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomeAtor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomePersonagem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Personagens", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Serie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Classificacao")
                        .HasMaxLength(20)
                        .HasColumnType("float");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FaixaEtaria")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Series", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Temporada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Temporadas", (string)null);
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Assinante")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("PersonagemSerie", b =>
                {
                    b.Property<Guid>("ElencoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ElencoId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieElencos", (string)null);
                });

            modelBuilder.Entity("FilmeGenero", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Filme", null)
                        .WithMany()
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStar.Domain.Entities.Genero", null)
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmePersonagem", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Personagem", null)
                        .WithMany()
                        .HasForeignKey("ElencoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStar.Domain.Entities.Filme", null)
                        .WithMany()
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneroSerie", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Genero", null)
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStar.Domain.Entities.Serie", null)
                        .WithMany()
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.AvaliacaoFilme", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Filme", "Filme")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStar.Domain.Entities.Usuario", "Usuario")
                        .WithMany("AvaliacoesFilme")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filme");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.AvaliacaoSerie", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Serie", "Serie")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStar.Domain.Entities.Usuario", "Usuario")
                        .WithMany("AvaliacoesSerie")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Episodio", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Temporada", "Temporada")
                        .WithMany("Episodio")
                        .HasForeignKey("TemporadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Temporada", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Serie", "Serie")
                        .WithMany("Temporada")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("PersonagemSerie", b =>
                {
                    b.HasOne("MovieStar.Domain.Entities.Personagem", null)
                        .WithMany()
                        .HasForeignKey("ElencoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStar.Domain.Entities.Serie", null)
                        .WithMany()
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Filme", b =>
                {
                    b.Navigation("Avaliacoes");
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Serie", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Temporada", b =>
                {
                    b.Navigation("Episodio");
                });

            modelBuilder.Entity("MovieStar.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("AvaliacoesFilme");

                    b.Navigation("AvaliacoesSerie");
                });
#pragma warning restore 612, 618
        }
    }
}
